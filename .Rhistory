resTable_fdr
res_en
Res
ot <- read_csv("input/5000_Paleognate3_28/df.csv")
View(ot)
##Please enter your interested gene dataframe
int <- "intersectGF.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
##background。OG2GOでもいいし、commonでもいい
background <- names(OG2GO)
Interested <- as.character(Interested$Orthogroup)
ot2 <- Interested %>% left_join(ot)
ot
Interested
Interested %>% class()
Interested <- Interested %>% as_data_frame()
Interested
ot2 <- Interested %>% left_join(ot)
ot2 <- Interested %>% left_join(ot, by = c(X1 == "Orthogrup"))
ot2 <- Interested %>% left_join(ot, by = c(X1 = "Orthogrup"))
ot2 <- Interested %>% dplyr::left_join(ot, by = c(X1 = "Orthogrup"))
ot2 <- Interested %>% dplyr::left_join(ot, by = c("X1" = "Orthogrup"))
ot2 <- Interested %>% dplyr::left_join(ot, by = c("X1" == "Orthogrup"))
View(Interested)
ot2 <- Interested %>% dplyr::left_join(ot, by = c(value = "Orthogrup"))
ot2 <- Interested %>% dplyr::left_join(ot, by = c(value = "Orthogroup"))
ot2
View(ot2)
##introduction4topgo.Rのつづき
##OGはそれぞれ含まれる遺伝子数が異なる。
##各OGに含まれるニワトリオーソログ全てのGOtermをまとめ、冗長性をなくしたデータを用意する
library(tidyverse)
library(biomaRt)
library(org.Gg.eg.db)
library(org.Hs.eg.db)
path = "5000_Paleognate3_28"
file <- "intersectGF.txt"
##introduction4topgo.Rで処理したニワトリデータを読み込み
Ggal_base <- read_csv(paste("input", path, "df.csv", sep = "/"))
##backgroundによって、Ggal_baseに色々つける
back <- read_tsv(paste("../cafe/summary", path, file, sep = "/"),
col_names = "Orthogroup")
Gga <- back %>% left_join(Ggal_base)
#EnvironmentからGgaを確認し、何列目までアノテーションが続いているか確認
#Overall ... 75列目までだったから、75にする
#Union ... 58
#Intersect ... 18
suji <- 18
Ggal <- Gga[1:suji]
Ggal[suji]
##BIOMARTでひもづけの準備
db <- useMart("ENSEMBL_MART_ENSEMBL")
data <- "ggallus_gene_ensembl"
path <- "5000_Paleognate3_28"
##全体のデータが入っているdataframe読み込み
##OrthogroupごとにbiomaRtでGO termを紐付けたバージョン
file <- "distinct_Gagal_norapid.tsv"
OG2GO <- readMappings(paste("input", path, file, sep = "/"))
##Please enter your interested gene dataframe
int <- "intersectGF.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
##background。OG2GOでもいいし、commonでもいい
background <- names(OG2GO)
Interested <- as.character(Interested$Orthogroup)
##backgroundのどこにInterested
input <- factor(as.integer(background %in% Interested))
names(input) <- background
##確認
table(input)
##topGOdata making
topgodata <- new("topGOdata",
ontology = "BP",
allGenes = input,
geneSel = function(x) {x == 1},  #Interested
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = OG2GO)  #background
##topGOdataにはどんな遺伝子が入っているのかな
sg <- sigGenes(topgodata)
str(sg)
numSigGenes(topgodata)
##Enrichment analysis
##"weight01"はGO hierarchyを考えてくれるが、"classic"は考えてくれない
##algorithm ... classic, elim, weight, weight01
##statistic ... ks, fisher
alg <- "weight01"
sta <- "fisher"
res_en <- runTest(topgodata, algorithm = alg, statistic = sta)
res_en
Res <- GenTable(topgodata, res_en, orderBy = 'res_en', topNodes = length(res_en@score))
Res
##6. Create Result Table
resTable <- GenTable(topgodata, res_en, topNodes = 20)
resTab <- resTable %>% dplyr::rename(pvalue = "result1")
##多重検定補正
fdr <- p.adjust(resTab[,6], method = "BH")
resTable_fdr <- resTab %>%
bind_cols(fdr) %>%
dplyr::rename(FDR = ...7)
resTable_fdr
View(resTable)
View(Res)
library(tidyverse)
####OGdistinct.Rで保存した、遺伝子ファミリーにニワトリGOが紐づいたデータを見てみる
ot <- read_tsv("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
View(ot)
##introduction4topgo.Rのつづき
##OGはそれぞれ含まれる遺伝子数が異なる。
##各OGに含まれるニワトリオーソログ全てのGOtermをまとめ、冗長性をなくしたデータを用意する
library(tidyverse)
library(biomaRt)
library(org.Gg.eg.db)
library(org.Hs.eg.db)
##introduction4topgo.Rで処理したニワトリデータを読み込み
Ggal_base <- read_csv(paste("input", path, "df.csv", sep = "/"))
##backgroundによって、Ggal_baseに色々つける
back <- read_tsv(paste("../cafe/summary", path, file, sep = "/"),
col_names = "Orthogroup")
getwd()
##backgroundによって、Ggal_baseに色々つける
back <- read_tsv(paste("../cafe/summary", path, file, sep = "/"),
col_names = "Orthogroup")
file <- "intersectGF.txt"
##backgroundによって、Ggal_baseに色々つける
back <- read_tsv(paste("../cafe/summary", path, file, sep = "/"),
col_names = "Orthogroup")
Gga <- back %>% left_join(Ggal_base)
View(Gga)
#EnvironmentからGgaを確認し、何列目までアノテーションが続いているか確認
#Overall ... 75列目までだったから、75にする
#Union ... 58
#Intersect ... 18
suji <- 18
Ggal <- Gga[1:suji]
Ggal[suji]
db <- useMart("ENSEMBL_MART_ENSEMBL")
##data <- "hsapiens_gene_ensembl"
data <- "ggallus_gene_ensembl"
Gg <- useDataset(data, mart = db)
filters <- listFilters(Gg)
attributes <- listAttributes(Gg)
##欲しいbiomart attributesを検索
filters[grep("id", filters[,1]),]
fil <- "entrezgene_id"
attributes[grep("id", filters[,1]),]
att <- c("go_id", "entrezgene_id")
##for文で、tidyGgal_baseの各列にgo_idを紐付けしていく
##関数定義
g <- function(x){
res <- getBM(att, fil, x, Gg)
res %>% return()
}
##whileで各列繰り返し
##まずは、繰り返しで蓄積させる用のneodfを定義
neodf = data_frame()
##1列目はOrthogroupの名前ベクトルなので、2列目から
i = 2
while (i <= ncol(Ggal)) {
##exはGgal_baseの列ベクトル
ex <- Ggal[,i]
##関数の結果をaに入れる。
a <- g(ex)
while (class(a[[1]]) != "character") {
i <- i + 1
ex <- Ggal[,i]
a <- g(ex)
}
##numはGgal_baseの各列名
num <- assign(paste("V", i, sep = ""), colnames(Ggal[,i]))
newdf <- Ggal %>%
dplyr::rename(entrezgene_id = num) %>%
left_join(a, by = "entrezgene_id") %>%
dplyr::select(c(Orthogroup, go_id)) %>%
filter(go_id != "NA") %>%
filter(go_id != "")
neodf <- neodf %>% bind_rows(newdf)
print(i)
i <- i + 1
}
library(tidyverse)
library(biomaRt)
library(org.Gg.eg.db)
library(org.Hs.eg.db)
Gg <- useDataset(data, mart = db)
filters <- listFilters(Gg)
attributes <- listAttributes(Gg)
##欲しいbiomart attributesを検索
filters[grep("id", filters[,1]),]
fil <- "entrezgene_id"
attributes[grep("id", filters[,1]),]
att <- c("go_id", "entrezgene_id")
##for文で、tidyGgal_baseの各列にgo_idを紐付けしていく
##関数定義
g <- function(x){
res <- getBM(att, fil, x, Gg)
res %>% return()
}
##whileで各列繰り返し
##まずは、繰り返しで蓄積させる用のneodfを定義
neodf = data_frame()
##1列目はOrthogroupの名前ベクトルなので、2列目から
i = 2
while (i <= ncol(Ggal)) {
##exはGgal_baseの列ベクトル
ex <- Ggal[,i]
##関数の結果をaに入れる。
a <- g(ex)
while (class(a[[1]]) != "character") {
i <- i + 1
ex <- Ggal[,i]
a <- g(ex)
}
##numはGgal_baseの各列名
num <- assign(paste("V", i, sep = ""), colnames(Ggal[,i]))
newdf <- Ggal %>%
dplyr::rename(entrezgene_id = num) %>%
left_join(a, by = "entrezgene_id") %>%
dplyr::select(c(Orthogroup, go_id)) %>%
filter(go_id != "NA") %>%
filter(go_id != "")
neodf <- neodf %>% bind_rows(newdf)
print(i)
i <- i + 1
}
neodf2 <- neodf %>%
group_by(Orthogroup) %>%
mutate(number = row_number())
##nouvelledfは連番ごとにpivot_widerして横に長くした、各OGごとのGO
nouvelledf <- neodf2 %>%
pivot_wider(names_from = number, values_from = go_id)
##冗長性排除
##完成したものを入れるdfを作る。列数は一応nouveledfに準拠
datf <- nouvelledf %>%
filter(between(Orthogroup, 1, nrow(nouvelledf))) %>%
dplyr::select(Orthogroup)
ot <- nouvelledf %>%
t() %>%
as_data_frame()
for (m in 1:ncol(ot)) {
result <- ot %>%
distinct(ot[m]) %>%
na.omit() %>%
t() %>%
as_data_frame()
datf <- datf %>% bind_rows(result)
print(m)
}
datf2 <- datf %>% ungroup() %>% dplyr::select(!"Orthogroup")
#outname <- "distinct_Gagal_union.tsv"
#outname <- "distinct_Gagal_union_11.tsv"
#outname <- "distinct_Gagal_intersect.tsv"
#outname <- "distinct_Gagal_overall.tsv"
#outname <- "distinct_Gagal_norapid.tsv"
outname <- "5000distinct_Gagal_intersect.tsv"
datf2 %>% write_tsv(paste("input", path, outname, sep = "/"))
View(datf2)
View(neodf2)
View(nouvelledf)
####OGdistinct.Rで保存した、遺伝子ファミリーにニワトリGOが紐づいたデータを見てみる
ot <- read_tsv("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
ot
library(topgo)
library(topGO)
####OGdistinct.Rで保存した、遺伝子ファミリーにニワトリGOが紐づいたデータを見てみる
ot <- readMappings("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
background <- names(ot)
ot_fore <- read_tsv("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
View(ot_fore)
Interested <- as.character(ot_fore$V1)
##backgroundのどこにInterested
input <- factor(as.integer(background %in% Interested))
names(input) <- background
##確認
table(input)
##topGOdata making
topgodata <- new("topGOdata",
ontology = "BP",
allGenes = input,
geneSel = function(x) {x == 1},  #Interested
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = OG2GO)  #background
topgodata
head(topgodata)
open(topgodata)
alg <- "weight01"
sta <- "fisher"
res_en <- runTest(topgodata, algorithm = alg, statistic = sta)
res_en
description(topgodata)
go <- usedGO(topgodata)
go
num.ann.genes <- countGenesInTerm(GOdata)
str(num.ann.genes)
num.ann.genes <- countGenesInTerm(topgodata)
str(num.ann.genes)
res_en
path <- "5000_Paleognate3_28"
##全体のデータが入っているdataframe読み込み
##OrthogroupごとにbiomaRtでGO termを紐付けたバージョン
file <- "distinct_Gagal_norapid.tsv"
OG2GO <- readMappings(paste("input", path, file, sep = "/"))
##Please enter your interested gene dataframe
int <- "intersectGF.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
##background。OG2GOでもいいし、commonでもいい
background <- names(OG2GO)
Interested <- as.character(Interested$Orthogroup)
##backgroundのどこにInterested
input <- factor(as.integer(background %in% Interested))
names(input) <- background
##確認
table(input)
##topGOdata making
topgodata <- new("topGOdata",
ontology = "BP",
allGenes = input,
geneSel = function(x) {x == 1},  #Interested
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = OG2GO)  #background
##topGOdataにはどんな遺伝子が入っているのかな
sg <- sigGenes(topgodata)
str(sg)
numSigGenes(topgodata)
##Enrichment analysis
##"weight01"はGO hierarchyを考えてくれるが、"classic"は考えてくれない
##algorithm ... classic, elim, weight, weight01
##statistic ... ks, fisher
alg <- "weight01"
sta <- "fisher"
res_en <- runTest(topgodata, algorithm = alg, statistic = sta)
res_en
Res <- GenTable(topgodata, res_en, orderBy = 'res_en', topNodes = length(res_en@score))
Res
##6. Create Result Table
resTable <- GenTable(topgodata, res_en, topNodes = 20)
resTab <- resTable %>% dplyr::rename(pvalue = "result1")
##多重検定補正
fdr <- p.adjust(resTab[,6], method = "BH")
resTable_fdr <- resTab %>%
bind_cols(fdr) %>%
dplyr::rename(FDR = ...7)
resTable_fdr
G2GO <- readMappings("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
G2GO
View(G2GO)
myGOdata <- new("topGOdata", ontology = "BP", allGenes = G2GO)
##background。OG2GOでもいいし、commonでもいい
background <- names(G2GO)
##backgroundのどこにInterested
input <- factor(as.integer(background %in% background))
names(input) <- background
##確認
table(input)
##topGOdata making
topgodata <- new("topGOdata",
ontology = "BP",
allGenes = input,
geneSel = function(x) {x == 1},  #Interested
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = G2GO)  #background
path <- "5000_Paleognate3_28"
##全体のデータが入っているdataframe読み込み
##OrthogroupごとにbiomaRtでGO termを紐付けたバージョン
file <- "distinct_Gagal_norapid.tsv"
OG2GO <- readMappings(paste("input", path, file, sep = "/"))
##Please enter your interested gene dataframe
int <- "intersectGF.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
##background。OG2GOでもいいし、commonでもいい
background <- names(OG2GO)
Interested <- as.character(Interested$Orthogroup)
##backgroundのどこにInterested
input <- factor(as.integer(background %in% Interested))
names(input) <- background
##確認
table(input)
##topGOdata making
topgodata <- new("topGOdata",
ontology = "BP",
allGenes = input,
geneSel = function(x) {x == 1},  #Interested
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = OG2GO)  #background
##topGOdataにはどんな遺伝子が入っているのかな
sg <- sigGenes(topgodata)
str(sg)
numSigGenes(topgodata)
##Enrichment analysis
##"weight01"はGO hierarchyを考えてくれるが、"classic"は考えてくれない
##algorithm ... classic, elim, weight, weight01
##statistic ... ks, fisher
alg <- "weight01"
sta <- "fisher"
res_en <- runTest(topgodata, algorithm = alg, statistic = sta)
res_en
Res <- GenTable(topgodata, res_en, orderBy = 'res_en', topNodes = length(res_en@score))
Res
##6. Create Result Table
resTable <- GenTable(topgodata, res_en, topNodes = 20)
resTab <- resTable %>% dplyr::rename(pvalue = "result1")
##多重検定補正
fdr <- p.adjust(resTab[,6], method = "BH")
resTable_fdr <- resTab %>%
bind_cols(fdr) %>%
dplyr::rename(FDR = ...7)
resTable_fdr
View(resTable_fdr)
View(Res)
##Inteesectをbackgroundにして、どんなGO termがあるのか調べる
ot <- readMappings("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
int <- "unionGF.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
int <- "Interested2.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
int <- "intersectGF2.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
int <- "intersectGF2.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
background <- names(ot)
Interested <- as.character(Interested$Orthogroup)
##backgroundのどこにInterested
input <- factor(as.integer(background %in% Interested))
names(input) <- background
##確認
table(input)
##topGOdata making
topgodata <- new("topGOdata",
ontology = "BP",
allGenes = input,
geneSel = function(x) {x == 1},  #Interested
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = OG2GO)  #background
alg <- "weight01"
sta <- "fisher"
res_en <- runTest(topgodata, algorithm = alg, statistic = sta)
res_en
View(res_en)
ot <- read_tsv("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
View(ot)
ot %>% pivot_longer(2:29, names_to = "GOterm", values_to = "otamesi")
ott <- ot %>% pivot_longer(2:29, names_to = "GOterm", values_to = "otamesi")
View(ott)
ottt <- pivot_wider(names_from = otamesi, values_from = GOTerm)
ottt <- ott %>% pivot_wider(names_from = otamesi, values_from = GOTerm)
ottt <- ott %>% pivot_wider(names_from = otamesi, values_from = GOterm)
View(ottt)
##Inteesectをbackgroundにして、どんなGO termがあるのか調べる
ot <- read_tsv("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
col(ot)
ncol(ot)
##ot行はfamily、列はそれぞれ入っているGOterm。
##GOtermそれぞれが何このファミリーにくっついているのか確認
ott <- ot %>% pivot_longer(2:ncol(ot), names_to = "retsu", "GOterm")
##ot行はfamily、列はそれぞれ入っているGOterm。
##GOtermそれぞれが何このファミリーにくっついているのか確認
ott <- ot %>% pivot_longer(2:ncol(ot), names_to = "retsu", values_to = "GOterm")
ottt <- ott %>% group_by(GOterm) %>% count()
ottt <- ott %>%
group_by(GOterm) %>%
count() %>%
na.omit()
ot2 <- read_csv("input/5000_Paleognate3_28/df.csv")
View(ot2)
ot2 <- read_tsv("input/5000_Paleognate3_28/distinct_Gagal_norapid.tsv")
View(ot2)
##Please enter your interested gene dataframe
int <- "intersectGF.txt"
Interested <- read_tsv(paste("../cafe/summary", path, int, sep = "/"),
col_names = "Orthogroup")
View(Interested)
ot3 <- left_join(Interested, ot2, by = c(Orthogroup = "X1"))
ot3 <- left_join(Interested, ot2, by = c(Orthogroup = "V1"))
View(ot3)
##Inteesectをbackgroundにして、どんなGO termがあるのか調べる
ot <- read_tsv("input/5000_Paleognate3_28/5000distinct_Gagal_intersect.tsv")
##ot行はfamily、列はそれぞれ入っているGOterm。
##GOtermそれぞれが何このファミリーにくっついているのか確認
ott <- ot %>% pivot_longer(2:ncol(ot), names_to = "retsu", values_to = "GOterm")
ottt <- ott %>%
group_by(GOterm) %>%
count() %>%
na.omit()
View(ott)
otamesi = read_tsv("input/5000_Paleognate3_28/df.csv")
otamesi = read_csv("input/5000_Paleognate3_28/df.csv")
View(otamesi)
node <- read.table("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_node.txt")
node <- read_table("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_node.txt")
View(node)
node <- read_table("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_fams.txt")
fams <- read_csv("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_fams.txt")
View(fams)
fams <- read_tsv("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_fams.txt")
fams <- read_tanle("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_fams.txt")
fams <- read_table("../cafe/summary/5000_Paleognate3_28/5000_Paleognate3_28_fams.txt")
View(otamesi)
View(ot3)
View(ottt)
View(ott)
