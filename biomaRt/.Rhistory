library(biomaRt)
library(tidyverse)
library(stringr)
##0.それぞれのOGsにどんなgeneが含まれているかのデータを用意。
taiou <- read_tsv("Orthogroups.tsv")
taiou
##1.興味あるinputデータの読み込みと整形→getBMのValuesに入れるやつの作成。
Corvidae <- read_tsv("CorvusGF.txt", col_names = "Orthogroup")
Corvidae = Corvidae %>% separate(Orthogroup, into=c("number", "Orthogroup"))
##CorvidaeにあるOGが、注目しているCorvus属と、リファレンスのTaeniopygia、Ficedula、Parus属に限定する。
##left_join()で、taiouからCorvidaeと一致する行だけ抽出。
OGtoGen = left_join(Corvidae, taiou, by = "Orthogroup")
OGtoGen = OGtoGen %>% select(!c(number)) ##一番左の列にnumber列があるので、これを取り除く。
OGtoGen ##今のところ、OGtoGenはOG-to-geneの状態で、複数種におけるOGの内容が複数列にわたって記されている。
PIVOTOGtoGen = OGtoGen %>% pivot_longer(2:8, names_to = "species", values_to = "refseq") #OGtoGenは1列目にOrthogroup、2~8列目に種が書いてある。
PIVOTOGtoGen
ref = PIVOTOGtoGen%>% filter(species %in% c("Ficedula_albicolis_protein", "TaeGut_protein", "Parus_major_protein"))
dim(ref) ##三種outgroupの繰り返しで138行→138÷3=46 OrthoGroupsがカラス系統特異的に進化した
ref <- ref %>% na.omit() ##NAを排除。三種全てで確認できなかったOGもあるが、全部のOGをGO annotationできるわけではない。
ref$refseq <- ref$refseq %>% strsplit(split = ",") ##コンマで区切ってみやすく
##ref$speciesを三種それぞれに分解して、三種それぞれのrefseq情報を作成。
Falb <- ref[ref$species == "Ficedula_albicolis_protein",]
Pmaj <- ref[ref$species == "Parus_major_protein",]
Tgut <- ref[ref$species == "TaeGut_protein",]
##refseq_peptide_predictedの後ろの.1とかを消去する
Falb <- Falb$refseq %>% str_replace(pattern = "\\.\\d", replacement = "")
Falb <- Falb %>% str_replace(pattern = "\\.\\d", replacement = "")
Pmaj <- Pmaj$refseq %>% str_replace(pattern = "\\.\\d", replacement = "")
Pmaj <- Pmaj %>% str_replace(pattern = "\\.\\d", replacement = "")
Tgut <- Tgut$refseq %>% str_replace(pattern = "\\.\\d", replacement = "")
Tgut <- Tgut %>% str_replace(pattern = "\\.\\d", replacement = "")
##2.biomaRtで参照するデータの準備
listMarts() ##どんなmartがあるのか調べる。
db <- useMart("ENSEMBL_MART_ENSEMBL") ##使いたいbiomartを指定
listDatasets(db) ##どんなデータがストックされているか調べる
fa <- useDataset("falbicollis_gene_ensembl", mart = db) ##martはデータベースの名前
pm <- useDataset("pmajor_gene_ensembl", mart = db)
tg <- useDataset("tguttata_gene_ensembl", mart = db)
##変換元の属性名を検索
filters <- listFilters(fa) ##引数はfaなど
filters[grep("seq", filters[,1]),] ##input(すなわち、REFSEQ)はNCBIから撮ってきたXP_xxxxxxってやつ(多分タンパク質のAA配列)
##変換先は？遺伝子名をEnsembl outputに直したいのでensembl_peptide_id。元のrefseq_peptide(_predicted)も入れておこう。
attributes <- listAttributes(fa)
attributes[grep("go_id", attributes[,1]),] ##ensembl,go_id,seqで検索
##3.それじゃあ変換しよう
resFa <- getBM(attributes =c("refseq_peptide_predicted", "ensembl_gene_id", "go_id"),  #attributesに入れる値は、listAttributes()で調べたやつ
filters = "refseq_peptide_predicted", #filters に入れる値は、listFilters()で探したやつ
values = Falb, #valuesには、変換元のデータが入っている列を指定。
mart = fa)
#            useCache = FALSE)
resFa
resPm <- getBM(attributes =c("refseq_peptide_predicted", "ensembl_gene_id", "go_id"),  #attributesに入れる値は、listAttributes()で調べたやつ
filters = "refseq_peptide_predicted", #filters に入れる値は、listFilters()で探したやつ
values = Pmaj, #valuesには、変換元のデータが入っている列を指定。
mart = pm)
#            useCache = FALSE)
resPm
resTg <- getBM(attributes =c("refseq_peptide_predicted", "ensembl_gene_id", "go_id"),  #attributesに入れる値は、listAttributes()で調べたやつ
filters = "refseq_peptide_predicted", #filters に入れる値は、listFilters()で探したやつ
values = Tgut, #valuesには、変換元のデータが入っている列を指定。
mart = tg)
#            useCache = FALSE)
resTg
##これで、遺伝子にGO termを紐付けできた。
##4. 興味ある遺伝子テーブル(ref)と先ほど作った「gene-to-GOテーブル」を接続
ORref <- ref[order(ref$Orthogroup),]
ORref
##まず、使用した三種のアノテーションデータを結合。
resFaPm <- bind_rows(resFa, resPm)
res <- bind_rows(resFaPm, resTg)
res
res <- res[order(res$refseq_peptide_predicted),]
##結合前に、ref中のrefseqのrefseq_peptide_predictedのお尻を削る
ref$refseq <- ref$refseq %>% str_replace(pattern = "\\.\\d", replacement = "")
ref
##いよいよ結合
class(ref$refseq)
res$refseq_peptide_predicted <- res$refseq_peptide_predicted %>% as.character()
annotation <- full_join(ref, res, by = c(refseq = "refseq_peptide_predicted")) ##joinするときは、二つのclassを揃えよう。
annotation
##遺伝子とGO termの紐付けが終われば、いよいよenrichment analysisへ移ろう。
class(annotation)
View(annotation)
annotation <- annotation %>% na.omit()
annotation
View(annotation)
##ファイルの書き出しも忘れずに
annotation %>% write.table("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.csv",
quote = F, col.names = F)
##ファイルの書き出しも忘れずに
annotation %>% write.table("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.csv",
quote = F, col.names = F, append = T)
##ファイルの書き出しも忘れずに
annotation %>% write.table("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.csv",
quote = F, col.names = F)
View(annotation)
##ファイルの書き出しも忘れずに
annotation %>% write.table("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.txt",
quote = F, col.names = T)
library(biomaRt)
library(tidyverse)
library
##ファイルの書き出しも忘れずに
annotation %>% write("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.txt",
quote = F, col.names = T)
##ファイルの書き出しも忘れずに
annotation %>% write.table("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.txt",
quote = F, col.names = T)
annotation %>% write.table("/Users/araisota/research/enrichment/biomaRt/ANNOTATION.csv",
quote = F, col.names = T)
library(biomaRt)
library(tidyverse)
library(stringr)
PIVOTOGtoGen
ref = PIVOTOGtoGen%>% filter(species %in% c("Ficedula_albicolis_protein", "TaeGut_protein", "Parus_major_protein"))
dim(ref) ##三種outgroupの繰り返しで138行→138÷3=46 OrthoGroupsがカラス系統特異的に進化した
ref <- ref %>% na.omit() ##NAを排除。三種全てで確認できなかったOGもあるが、全部のOGをGO annotationできるわけではない。
ref$refseq <- ref$refseq %>% strsplit(split = ",") ##コンマで区切ってみやすく
##ref$speciesを三種それぞれに分解して、三種それぞれのrefseq情報を作成。
Falb <- ref[ref$species == "Ficedula_albicolis_protein",]
##refseq_peptide_predictedの後ろの.1とかを消去する
Falb <- Falb$refseq %>% str_replace(pattern = "\\.\\d", replacement = "")
Falb <- Falb %>% str_replace(pattern = "\\.\\d", replacement = "")
Falb
PIVOTOGtoGen
ref = PIVOTOGtoGen%>% filter(species %in% c("Ficedula_albicolis_protein", "TaeGut_protein", "Parus_major_protein"))
dim(ref) ##三種outgroupの繰り返しで138行→138÷3=46 OrthoGroupsがカラス系統特異的に進化した
ref <- ref %>% na.omit() ##NAを排除。三種全てで確認できなかったOGもあるが、全部のOGをGO annotationできるわけではない。
ref$refseq <- ref$refseq %>% strsplit(split = ",") ##コンマで区切ってみやすく
ref
ref$refseq
View(ORref)
View(annotation)
getwd()
library(biomaRt)
library(tidyverse)
library(stringr)
##refseq_peptide_predictedの後ろの.1とかを消去する
Falb <- Falb$refseq %>% str_replace(pattern = "\\.\\d", replacement = "")
Falb <- Falb %>% str_replace(pattern = "\\.\\d", replacement = "")
Falb
library(biomaRt)
library(tidyverse)
library(stringr)
library(topGO)
listMarts()9
listMarts()
listDatasets(db)
